// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routeguide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	UserClickStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_UserClickStreamClient, error)
	FlockTargetStream(ctx context.Context, in *FlockTargetStreamRequest, opts ...grpc.CallOption) (RouteGuide_FlockTargetStreamClient, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) UserClickStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_UserClickStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], "/routeguide.RouteGuide/UserClickStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideUserClickStreamClient{stream}
	return x, nil
}

type RouteGuide_UserClickStreamClient interface {
	Send(*Point) error
	CloseAndRecv() (*ClickSummary, error)
	grpc.ClientStream
}

type routeGuideUserClickStreamClient struct {
	grpc.ClientStream
}

func (x *routeGuideUserClickStreamClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideUserClickStreamClient) CloseAndRecv() (*ClickSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClickSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) FlockTargetStream(ctx context.Context, in *FlockTargetStreamRequest, opts ...grpc.CallOption) (RouteGuide_FlockTargetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[1], "/routeguide.RouteGuide/FlockTargetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideFlockTargetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteGuide_FlockTargetStreamClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type routeGuideFlockTargetStreamClient struct {
	grpc.ClientStream
}

func (x *routeGuideFlockTargetStreamClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	UserClickStream(RouteGuide_UserClickStreamServer) error
	FlockTargetStream(*FlockTargetStreamRequest, RouteGuide_FlockTargetStreamServer) error
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) UserClickStream(RouteGuide_UserClickStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UserClickStream not implemented")
}
func (UnimplementedRouteGuideServer) FlockTargetStream(*FlockTargetStreamRequest, RouteGuide_FlockTargetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FlockTargetStream not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_UserClickStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).UserClickStream(&routeGuideUserClickStreamServer{stream})
}

type RouteGuide_UserClickStreamServer interface {
	SendAndClose(*ClickSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeGuideUserClickStreamServer struct {
	grpc.ServerStream
}

func (x *routeGuideUserClickStreamServer) SendAndClose(m *ClickSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideUserClickStreamServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_FlockTargetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlockTargetStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteGuideServer).FlockTargetStream(m, &routeGuideFlockTargetStreamServer{stream})
}

type RouteGuide_FlockTargetStreamServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type routeGuideFlockTargetStreamServer struct {
	grpc.ServerStream
}

func (x *routeGuideFlockTargetStreamServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routeguide.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserClickStream",
			Handler:       _RouteGuide_UserClickStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FlockTargetStream",
			Handler:       _RouteGuide_FlockTargetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routeguide/route_guide.proto",
}
